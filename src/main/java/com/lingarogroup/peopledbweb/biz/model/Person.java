package com.lingarogroup.peopledbweb.biz.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDate;

/**
 * The Person class is a JPA Entity that represents a person in the application.
 * It includes fields for id, first name, last name, date of birth, email, and salary.
 * It uses Lombok annotations for automatic generation of getters, setters, constructors, and other common methods.
 * It also uses JPA and Jakarta Validation annotations to define the table schema and validation rules.
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Person {
    /**
     * The id field is the primary key of the Person table.
     * It is automatically generated by JPA.
     */
    @Id
    @GeneratedValue
    private Long id;

    /**
     * The firstName field represents the person's first name.
     * It is required and must not be empty.
     */
    @NotEmpty(message = "First name is required")
    private String firstName;

    /**
     * The lastName field represents the person's last name.
     * It is required and must not be empty.
     */
    @NotEmpty(message = "Last name is required")
    private String lastName;

    /**
     * The dateOfBirth field represents the person's date of birth.
     * It is required and must be a date in the past.
     */
    @NotNull(message = "Date of birth is required")
    @Past(message = "Date of birth must be in the past")
    private LocalDate dateOfBirth;

    /**
     * The email field represents the person's email address.
     * It is required, must not be empty, and must be a valid email address.
     */
    @NotEmpty(message = "Email is required")
    @Email(message = "Invalid email address")
    private String email;

    /**
     * The salary field represents the person's salary.
     * It is required and must be at least 1000.
     */
    @NotNull(message = "Salary is required")
    @DecimalMin(value = "1000", message = "Salary must be at least 1000")
    private BigDecimal salary;

    private String photoFileName;
}
